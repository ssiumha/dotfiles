snippet topologySpreadConstraints "basic option"
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app: app-name
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
endsnippet

snippet base_deployment "template"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: dev
spec:
  replicas: 2
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app: api
      containers:
        - env:
          - name: DATABASE_URL
            value: 'postgres://user:password@postgresql/dev'
          image: 000000000000.dkr.ecr.ap-northeast-2.amazonaws.com/app:latest
          imagePullPolicy: Always
          name: api
          ports:
            - containerPort: 8080
              name: http
          resources:
            limits:
              memory: "1Gi"
              ephemeral-storage: "4Gi"
            requests:
              cpu: "100m"
              memory: "1Gi"
              ephemeral-storage: "4Gi"
endsnippet

snippet base_pvc "template persistent volume clame"
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: volume-claim
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
endsnippet

snippet attach_pvc_spec "to container"
    spec:
      containers:
        - name: ubuntu
          image: ubuntu
          command:
            - sleep
            - "infinity"
          volumeMounts:
            - mountPath: /app/folder
              name: volume
      volumes:
        - name: volume
          persistentVolumeClaim:
            claimName: volume-claim
endsnippet

snippet base_sts "template statefulset"
apiVersion: v1
kind: Service
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  ports:
  - port: 80
    name: web
  clusterIP: None
  selector:
    app: nginx
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web
spec:
  serviceName: "nginx"
  replicas: 2
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: registry.k8s.io/nginx-slim:0.8
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
        - name: www
          mountPath: /usr/share/nginx/html
  volumeClaimTemplates:
  - metadata:
      name: www
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
endsnippet
