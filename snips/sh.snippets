snippet source_location "get directory path"
script_dir=$(dirname $(realpath "$0"))
endsnippet

snippet source_location_v2 "get directory path"
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
endsnippet

snippet iter_textline "loop lines"
cat $file | while IFS=$'\n' read -r line; do
	echo $line
done
endsnippet

snippet args "xxx.sh arg1"
arg1=$1
endsnippet

snippet mise_shebang "base ruby"
#!/usr/bin/env -S mise x ruby@latest -- ruby
# vim: ft=ruby
endsnippet

snippet template_cli "basic with help"
#!/bin/bash

show_help() {
  echo "Usage: $0 <argument>"
  echo "Description: Describe your argument here."
}

if [ -z "$1" ]; then
  show_help
  exit 1
fi
endsnippet

snippet template_strict "start shell script"
#!/usr/bin/env bash

set -euxo pipefail
endsnippet

snippet run_docker_compose "run heredoc"
cat <<-EOF | docker compose --file - --project-name ${COMPOSE_NAME} up --detach --force-recreate --wait
  version: "3.9"

  services:
    postgres:
      image: postgres:11-alpine
      container_name: \${COMPOSE_PROJECT_NAME}-postgres
      healthcheck:
        test: ['CMD-SHELL', 'pg_isready -U $$POSTGRES_USER']
      environment:
        POSTGRES_DB: test_db
        POSTGRES_USER: user
        POSTGRES_PASSWORD: password
      expose:
        - "5432"
      networks:
        - docker-compose-default

    redis:
      image: redis
      container_name: \${COMPOSE_PROJECT_NAME}-redis
      healthcheck:
        test: ['CMD', 'redis-cli', 'ping']
        interval: 10s
        timeout: 5s
        retries: 5
      expose:
        - "6379"
      networks:
        - docker-compose-default

    mysql:
      image: mysql:8.0
      container_name: \${COMPOSE_PROJECT_NAME}-mysql
      healthcheck:
        test: ['CMD', 'mysqladmin' ,'ping', '-h', 'localhost']
        timeout: 20s
        retries: 10
      environment:
        MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
        MYSQL_USER: "user"
        MYSQL_PASSWORD: "password"
        MYSQL_DATABASE: "database"
      expose:
        - "3306"
      networks:
        - docker-compose-default

  networks:
    docker-compose-default:
      external: true
EOF
endsnippet
