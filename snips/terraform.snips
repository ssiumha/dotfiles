snippet eks_managed_node_gorups "in eks module"
  eks_managed_node_group_defaults = {
    instance_types = ["m5.xlarge"]
    max_size       = 99
  }
  eks_managed_node_groups = {
    "${local.cluster_name}_a" = {
      label = {
        Postfix = "a"
      }
    }
  }
endsnippet

snippet manual_irsa "s3 role sample"
resource "aws_iam_role" "irsa-foo-role" {
  name = "${local.cluster_name}-irsa-foo-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Sid = ""
      Effect = "Allow"
      Action = "sts:AssumeRoleWithWebIdentity"

      Principal = {
        Federated = module.eks.oidc_provider_arn
      }

      Condition = {
        StringEquals = {
          "${replace(module.eks.oidc_provider, "https://", "")}:sub" = "system:serviceaccount:<namespace>:<accountname>"
        }
      }
    }]
  })
}

resource "aws_iam_policy" "foo-policy" {
  name = "${local.cluster_name}-foo-policy"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Effect = "Allow"
      Action = [
        "s3:ListBucket",
        "s3:PutObject",
        "s3:GetObject",
        "s3:DeleteObject"
      ]
      Resource = [
        "arn:aws:s3:::${local.cluster_name}-foo",
        "arn:aws:s3:::${local.cluster_name}-foo/*"
      ]
    }]
  })
}

resource "aws_iam_role_policy_attachment" "irsa-foo-role" {
  role = aws_iam_role.irsa-foo-role.name
  policy_arn = aws_iam_policy.foo-policy.arn
}
endsnippet

snippet kubernetes_provider "version.tf"
provider "kubernetes" {
  config_path = "~/.kube/config"
  config_context = module.eks.cluster_arn
}
endsnippet
