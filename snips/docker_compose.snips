snippet services_template "services"
version: '3.9'

services:
  node:
    image: ubuntu:latest
    restart: always
    environment:
      - NAME=test
    ports:
      - 3000:3000
    volumes:
      - ./app:/app
    command:
      - --option
    depends_on:
      - another_node
endsnippet

snippet args "services.<service>.args"
    args:
      - NAME=test
endsnippet

snippet command "services.<service>.command"
    command:
      - NAME=test
endsnippet

snippet environment "services.<service>.environment"
    environment:
      - NAME=test
endsnippet

snippet ports "services.<service>.ports"
    ports:
      - 3000:3000/tcp
endsnippet

snippet volumes "services.<service>.volumes"
    volumes:
      - ./app:/app
endsnippet

snippet privileged "services.<service>.privileged"
    privileged: true
endsnippet

snippet deploy_replicas "services.<service>.deploy"
    deploy:
      mode: replicated
      replicas: 2
endsnippet

snippet networks_alloc_ip "services.<service>.networks. require network subnet"
    networks:
      main:
        ipv4_address: 10.0.100.1
endsnippet

snippet networks_subnet ".networks"
networks:
  main:
    name: main
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.0.100.0/16
endsnippet

snippet build ".services.<service>; context based on dockerfile path. dockerfile is optional"
    build:
      context: ./src
      dockerfile: ../service.Dockerfile
      platforms:
        - amd64
        - arm64
      args:
        - VAULT=TEST
endsnippet

snippet build_inline ".services.<service>"
    build:
      context: ./src
      dockerfile_inline: |
        FROM baseimage
        RUN command
endsnippet

snippet template_remote_buildkit ".services"
  # https://docs.docker.com/build/drivers/remote/
  remote-buildkit:
    image: moby/buildkit:latest
    ports:
      - 1234:1234
    command:
      - --addr
      - tcp://0.0.0.0:1234
    privileged: true
    restart: no
endsnippet

snippet inline_entrypoint ".services.<service>; no command"
    entrypoint:
      - /bin/sh
      - -c
      - |
        sleep infinity
endsnippet

snippet x_environment_define ".;"
x-environment:
  &environment
  - DATABASE_URL=postgres://localhost:5432
endsnippet

snippet x_environment_import "services.<service>"
    environment:
      *environment
endsnippet

snippet fullset_database ""
version: "3.9"

services:
  mysql:
    image: mysql:8.0
    container_name: \${COMPOSE_PROJECT_NAME}-mysql
    healthcheck:
      test: ['CMD', 'mysqladmin' ,'ping', '-h', 'localhost']
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      MYSQL_ROOT_PASSWORD: 'password'
    expose:
      - '3306'
    networks:
      - docker-compose-default

  redis:
    image: bitnami/redis:6.2.7
    container_name: \${COMPOSE_PROJECT_NAME}-redis
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      REDIS_EXTRA_FLAGS: '--databases 256'
      ALLOW_EMPTY_PASSWORD: 'yes'
    expose:
      - '6379'
    networks:
      - docker-compose-default

  elasticsearch:
    image: bitnami/elasticsearch:7.17.7
    container_name: \${COMPOSE_PROJECT_NAME}-elasticsearch
    healthcheck:
      test: ['CMD', 'elasticsearch-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      ELASTICSEARCH_HEAP_SIZE: '1024m'
    expose:
      - '9200'
    networks:
      - docker-compose-default

networks:
  docker-compose-default:
    external: true
endsnippet

snippet use_service "services.<name>.deploy; using replicas"
    deploy:
      replicas: ${COMPOSE_USE_SERVICE:-0}
endsnippet
