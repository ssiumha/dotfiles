#!/usr/bin/env ruby
# mise description="Get ECR Image list"

require_relative '../common'

puts "AWS_PROFILE: #{ENV['AWS_PROFILE']}\n----"

require 'optparse'
require 'json'

options = {}
OptionParser.new do |opts|
  opts.on('-sTAG', '--search=TAG', 'Search image tag perfix') { options[:search] = _1 }
end.parse!
repo_name = ARGV.pop

if repo_name.nil?
  repos = JSON.parse `aws ecr describe-repositories --output json`
  headers = %w[repositoryName createdAt] # repositoryArn

  IO.popen('column -t', 'r+') do |io|
    io.write headers.join(' ') + "\n"

    repos['repositories'].each do |repo|
      io.write headers.map{ repo[_1] }.join(' ') + "\n"
    end

    io.close_write
    puts io.readlines
  end

else
  query = if options[:search]
            "reverse(sort_by(imageDetails[?imageTags[?contains(@,`#{options[:search]}`)]], & imagePushedAt))[:10]"
          else
            'reverse(sort_by(imageDetails, & imagePushedAt))[:10]'
          end
  cmd = <<~CMD
    aws ecr describe-images \
        --query '#{query}' \
        --repository-name #{repo_name} --output json
  CMD

  puts cmd.gsub(/\s{2,}/, " \\\n  ")
  puts "====\n"

  images = JSON.parse %x(#{cmd})

  if images.empty?
    puts 'NOT FOUND IMAGES'
    exit 1
  end

  images.reverse.each do |image|
    # TODO: xxx ago
    puts <<~EOF
      pushed_at: #{image['imagePushedAt']}
        digest: #{image['imageDigest']}
        size: #{image['imageSizeInBytes']}
        tags:
          #{image['imageTags']&.join("\n    ")}

    EOF
    # digest: #{image['imageDigest'].gsub(/^(.{14})(.+)(.{6})$/, '\1...\3')}
  end

  puts "ECR_BASE_URL: #{images.first['registryId']}.dkr.ecr.ap-northeast-2.amazonaws.com/#{repo_name}"
end
