#!/bin/bash

# TODO
#   `!p python code...`
#   `date +%d`
#   perl -e '$s=q(test code long ${0}); $s =~ s{\$\{(.+?)\}}{ (0+$1) * 99; eval($code) }ge; print $s;'
#   fix space query

show_help() {
  echo "Usage: $0 <filetype>"
}

if [ -z "$1" ]; then
  show_help
  exit 1
fi

ft=$1
fp=$2
snips=("all.snippets")
snips+=("$ft*.snippets")

case $ft in
  typescript) snips+=("javascript.snippets") ;;
  zsh) snips+=("sh.snippets") ;;
  yaml)
    case $fp in
      *deployment/*      ) snips+=("kube.snippets") ;;
      *values.yaml       ) snips+=("helm.snippets") ;;
      *docker-compose.y* ) snips+=("docker_compose.snippets") ;;
      *compose.y*        ) snips+=("docker_compose.snippets") ;;
      *.github/workflows*) snips+=("github_workflow.snippets") ;;
    esac ;;
  ruby)
    case $fp in
      *app/admin/*      ) snips+=("rails_amdin.snippets") ;;
      *app/controllers/*) snips+=("rails_controller.snippets") ;;
      *config/*         ) snips+=("rails_config.snippets") ;;
      *db/migrate/*     ) snips+=("rails_migrate.snippets") ;;
      *test/*           ) snips+=("rails_minitest.snippets") ;;
    esac ;;
  eruby.yaml)
    case $fp in
      *test/fixtures/*) snips+=("rails_fixture.snippets") ;;
    esac ;;
  eruby)
    case $fp in
      *app/views/*) snips+=("rails_view.snippets") ;;
    esac ;;
esac

cd $HOME/dotfiles/snips

tmpfile=$(mktemp)

rg --with-filename --color=never '^snippet ' ${snips[@]} \
  | perl -ne 's/^(?<f>.+?):snippet (?<n>.+?) "(?<c>.*)"//; printf qq{%-30s\t\033[33m%-20s\033[0m\t%s\n}, $+{n}, $+{c}, $+{f}' \
  | sort \
  | fzf --delimiter "\t" --with-nth='1,2' --select-1 --height '~50%' \
        --preview 'perl -ne "\$a=sprintf {1}; print if /^snippet \$a/../endsnippet/ and not /^snippet|endsnippet/" {3} \
          | bat --plain --color always --language ruby' \
        --preview-window 'bottom:nowrap' \
        --bind 'ctrl-e:become(nvim {3})' \
        --bind 'enter:become(perl -ne "\$a=sprintf {1}; print if /^snippet \$a\b/../endsnippet/ and not /^snippet|endsnippet/" {3})' > $tmpfile

if [ ! -s "$tmpfile" ]; then
  exit 1
fi

replace_words=$(perl -nle 'print "$1" if /##{(.+?)}/' $tmpfile | sort -r | perl -nle '/(^\d+)/; print unless $seen{$1}++' | sort)

if [ ! -z "$replace_words" ]; then
  echo "$replace_words" | while IFS=$'\n' read -r line; do
    rnum=$(echo $line | perl -ne '/(\d+):?(.+)?/; print $1')
    rdefault=$(echo $line | perl -ne '/(\d+):?(.+)?/; print $2')

    input_word=$(echo '' | fzf --delimiter "\t" --query "$rdefault" \
      --header "$line" \
      --preview-window 'bottom:nowrap:99%' \
      --preview "perl -pe '\$a=q({q}); s;\##\{$rnum.*?};\$a;g' $tmpfile | bat" \
      --bind "ctrl-c:become(echo $rdefault)" \
      --bind 'enter:become(echo {q})')

    if [ -z "$input_word" ]; then
      input_word=$rdefault
    fi
    perl -i -pe "s;\##\{$rnum.*?};$input_word;g" $tmpfile
  done
fi

cat $tmpfile
