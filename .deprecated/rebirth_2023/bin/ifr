#!/usr/bin/env perl
use strict;
use warnings;

use Getopt::Long;

# util {{{

sub kube_current_context {
    (grep /^\*/, qx(kubectl config get-contexts))[0] =~ /^\*\s+([^\s]+)/; $1;
}

# }}}

my %CMD_MAP;

# kube {{{

$CMD_MAP{'kube'}{'ctx'} = sub {
    my @res = map { s/^(.)\s+([^\s]+).+$/$1 $2/r } qx(kubectl config get-contexts);
    open F, '|fzf|cut -c3-|xargs -I% kubectl config use-context %';
    print F splice(@res, 1);
    close F;
};

$CMD_MAP{'kube'}{'logs'} = sub {
    my $args = join ' ', @_;    # --namespace
    my @res = qx(kubectl get all $args);
    open F, "|fzf|awk '{print \$1}'|xargs -I% kubectl logs $args -f %";
    print F splice(@res, 1);
    close F;
};

$CMD_MAP{'kube'}{'bash'} = sub {
    # kubectl exec -n xxxx -it pod/xxxx-xxxx -- bash

    my $namespace = '';
    GetOptions(
        "n=s" => \$namespace,
    );
    print $namespace || 'aaa';
    $namespace = "-n $namespace" if $namespace;


    my $args = join ' ', @_;    # --namespace
    my @res = qx(kubectl get all $args);
    open F, "|fzf|awk '{print \$1}'|xargs -I% kubectl exec $args -it % -- bash";
    print F splice(@res, 1);
    close F;
};

$CMD_MAP{'kube'}{'watch'} = sub {
    # watch -n1 kubectl get all -n xxxx

    my @args = qw(-n0.1 kubectl get all);
    push @args, join ' ', @_;    # --namespace
    exec 'watch', @args;
};

# }}}

# AWS IMAGE
# aws ecr describe-images --repository-name crawler02 \
    # | jq -r '.imageDetails[] | "\(.imagePushedAt|todate) | \(.repositoryName) | \(.imageTags|join(", ")) | \(.imageDigest)"' \
    # | column -ts "|" | sort

# ----

# main {{{

my ($cmd, $subcmd, @args) = ($ARGV[0], $ARGV[1], splice @ARGV, 2);
unless (exists $CMD_MAP{$cmd}) {
    print 'not found command';
    exit 0;
}

unless (exists $CMD_MAP{$cmd}{$subcmd}) {
    print 'not found sub command';
    exit 0;
}

$CMD_MAP{$cmd}{$subcmd}(@args);

# }}}

# vim: fdm=marker
